// Generated by `wit-bindgen` 0.29.0.

///|
let url = "https://random-data-api.fermyon.app/physics/json"

///| `handle` handles a `GET /outbound-http` request and makes an outbound
/// GET request to `url` and returns its JSON response. It also handles
/// a `POST /md5sum` where the body is another URL to GET from. It will
/// stream the response of that endpoint to its `response_out` and calculate
/// that stream's md5sum, reporting it to stderr when the stream ends.
pub fn handle(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam
) -> Unit {
  let response = (match @util.split_path(request) {
      (@types.Get, ["outbound-http"]) => handle_get()
      (@types.Post, ["consume"]) => return consume(request, response_out, None)
      (@types.Post, ["consume?md5sum"]) =>
        return consume(request, response_out, Some(@md5.Digest::new()))
      (@types.Post, ["consume?sha256sum"]) =>
        return consume(request, response_out, Some(@sha256.Digest::new()))
      (@types.Post, ["stream"]) => return stream(request, response_out, None)
      (@types.Post, ["stream?md5sum"]) =>
        return stream(request, response_out, Some(@md5.Digest::new()))
      (@types.Post, ["stream?sha256sum"]) =>
        return stream(request, response_out, Some(@sha256.Digest::new()))
      _ => return @util.respond_404(response_out)
    })
    |> Ok
  response_out.set(response)
}

///|
fn handle_get() -> @types.OutgoingResponse {
  let req = @util.new_request(@types.Get, url)
  //
  match @util.send_request(req) {
    Ok(result) => @util.make_response(result, content_type=b"application/json")
    Err(e) => {
      let msg = @base64.str2bytes(e.to_string())
      @util.make_response(msg, status_code=500)
    }
  }
}

///|
fn consume(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam,
  hash : &@common.HashFunc?
) -> Unit {
  let url = match @util.get_body_bytes(request) {
    Ok(body) => @base64.bytes2str(body)
    _ => return @util.respond_500(response_out)
  }
  @log.info("Performing GET '\{url}'", leading_blank_line=true)
  let req = @util.new_request(@types.Get, url)
  let (num_bytes, hash_sum) = match @util.consume(req, hash, debug=true) {
    Ok(t) => t
    Err(e) => {
      let err = e.to_string()
      @log.error(err)
      let msg = @base64.str2bytes(err)
      return response_out.set(@util.make_response(msg, status_code=500) |> Ok)
    }
  }
  match hash {
    Some(hash) => {
      let hash_name = hash.name()
      @log.info(
        "Consumed \{num_bytes} bytes from 'GET \{url}', \{hash_name}sum = \{hash_sum}",
      )
      response_out.set(@util.make_response_str("\{hash_sum}\n") |> Ok)
    }
    _ => {
      @log.info("Consumed \{num_bytes} bytes from 'GET \{url}'")
      response_out.set(@util.make_response(b"OK\n") |> Ok)
    }
  }
}

///|
fn stream(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam,
  hash : &@common.HashFunc?
) -> Unit {
  let url = match @util.get_body_bytes(request) {
    Ok(body) => @base64.bytes2str(body)
    _ => return @util.respond_500(response_out)
  }
  @log.info("Performing GET '\{url}'", leading_blank_line=true)
  let req = @util.new_request(@types.Get, url)
  let (num_bytes, hash_sum) = match
    @util.stream(req, response_out, hash, debug=true) {
    Ok(t) => t
    Err(e) => {
      let err = e.to_string()
      @log.error(err)
      let msg = @base64.str2bytes(err)
      return response_out.set(@util.make_response(msg, status_code=500) |> Ok)
    }
  }
  match hash {
    Some(hash) => {
      let hash_name = hash.name()
      @log.info(
        "Streamed \{num_bytes} bytes from 'GET \{url}', \{hash_name}sum = \{hash_sum}",
      )
    }
    _ => @log.info("Streamed \{num_bytes} bytes from 'GET \{url}'")
  }
}
